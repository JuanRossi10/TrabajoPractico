// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2023 21:46:03"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Block1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Block1_vlg_sample_tst(
	clock,
	D,
	D41,
	D42,
	D43,
	D44,
	D45,
	D46,
	D47,
	D48,
	sampler_tx
);
input  clock;
input  D;
input  D41;
input  D42;
input  D43;
input  D44;
input  D45;
input  D46;
input  D47;
input  D48;
output sampler_tx;

reg sample;
time current_time;
always @(clock or D or D41 or D42 or D43 or D44 or D45 or D46 or D47 or D48)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Block1_vlg_check_tst (
	Q,
	Q35,
	Q36,
	Q37,
	Q38,
	Q39,
	Q40,
	sampler_rx
);
input  Q;
input  Q35;
input  Q36;
input  Q37;
input  Q38;
input  Q39;
input  Q40;
input sampler_rx;

reg  Q_expected;
reg  Q35_expected;
reg  Q36_expected;
reg  Q37_expected;
reg  Q38_expected;
reg  Q39_expected;
reg  Q40_expected;

reg  Q_prev;
reg  Q35_prev;
reg  Q36_prev;
reg  Q37_prev;
reg  Q38_prev;
reg  Q39_prev;
reg  Q40_prev;

reg  Q_expected_prev;
reg  Q35_expected_prev;
reg  Q36_expected_prev;
reg  Q37_expected_prev;
reg  Q38_expected_prev;
reg  Q39_expected_prev;
reg  Q40_expected_prev;

reg  last_Q_exp;
reg  last_Q35_exp;
reg  last_Q36_exp;
reg  last_Q37_exp;
reg  last_Q38_exp;
reg  last_Q39_exp;
reg  last_Q40_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	Q_prev = Q;
	Q35_prev = Q35;
	Q36_prev = Q36;
	Q37_prev = Q37;
	Q38_prev = Q38;
	Q39_prev = Q39;
	Q40_prev = Q40;
end

// update expected /o prevs

always @(trigger)
begin
	Q_expected_prev = Q_expected;
	Q35_expected_prev = Q35_expected;
	Q36_expected_prev = Q36_expected;
	Q37_expected_prev = Q37_expected;
	Q38_expected_prev = Q38_expected;
	Q39_expected_prev = Q39_expected;
	Q40_expected_prev = Q40_expected;
end



// expected Q
initial
begin
	Q_expected = 1'bX;
end 

// expected Q35
initial
begin
	Q35_expected = 1'bX;
end 

// expected Q36
initial
begin
	Q36_expected = 1'bX;
end 

// expected Q37
initial
begin
	Q37_expected = 1'bX;
end 

// expected Q38
initial
begin
	Q38_expected = 1'bX;
end 

// expected Q39
initial
begin
	Q39_expected = 1'bX;
end 

// expected Q40
initial
begin
	Q40_expected = 1'bX;
end 
// generate trigger
always @(Q_expected or Q or Q35_expected or Q35 or Q36_expected or Q36 or Q37_expected or Q37 or Q38_expected or Q38 or Q39_expected or Q39 or Q40_expected or Q40)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Q = %b | expected Q35 = %b | expected Q36 = %b | expected Q37 = %b | expected Q38 = %b | expected Q39 = %b | expected Q40 = %b | ",Q_expected_prev,Q35_expected_prev,Q36_expected_prev,Q37_expected_prev,Q38_expected_prev,Q39_expected_prev,Q40_expected_prev);
	$display("| real Q = %b | real Q35 = %b | real Q36 = %b | real Q37 = %b | real Q38 = %b | real Q39 = %b | real Q40 = %b | ",Q_prev,Q35_prev,Q36_prev,Q37_prev,Q38_prev,Q39_prev,Q40_prev);
`endif
	if (
		( Q_expected_prev !== 1'bx ) && ( Q_prev !== Q_expected_prev )
		&& ((Q_expected_prev !== last_Q_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Q_exp = Q_expected_prev;
	end
	if (
		( Q35_expected_prev !== 1'bx ) && ( Q35_prev !== Q35_expected_prev )
		&& ((Q35_expected_prev !== last_Q35_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q35 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q35_expected_prev);
		$display ("     Real value = %b", Q35_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Q35_exp = Q35_expected_prev;
	end
	if (
		( Q36_expected_prev !== 1'bx ) && ( Q36_prev !== Q36_expected_prev )
		&& ((Q36_expected_prev !== last_Q36_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q36 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q36_expected_prev);
		$display ("     Real value = %b", Q36_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Q36_exp = Q36_expected_prev;
	end
	if (
		( Q37_expected_prev !== 1'bx ) && ( Q37_prev !== Q37_expected_prev )
		&& ((Q37_expected_prev !== last_Q37_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q37 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q37_expected_prev);
		$display ("     Real value = %b", Q37_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_Q37_exp = Q37_expected_prev;
	end
	if (
		( Q38_expected_prev !== 1'bx ) && ( Q38_prev !== Q38_expected_prev )
		&& ((Q38_expected_prev !== last_Q38_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q38 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q38_expected_prev);
		$display ("     Real value = %b", Q38_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_Q38_exp = Q38_expected_prev;
	end
	if (
		( Q39_expected_prev !== 1'bx ) && ( Q39_prev !== Q39_expected_prev )
		&& ((Q39_expected_prev !== last_Q39_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q39 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q39_expected_prev);
		$display ("     Real value = %b", Q39_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_Q39_exp = Q39_expected_prev;
	end
	if (
		( Q40_expected_prev !== 1'bx ) && ( Q40_prev !== Q40_expected_prev )
		&& ((Q40_expected_prev !== last_Q40_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q40 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q40_expected_prev);
		$display ("     Real value = %b", Q40_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_Q40_exp = Q40_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Block1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg D;
reg D41;
reg D42;
reg D43;
reg D44;
reg D45;
reg D46;
reg D47;
reg D48;
// wires                                               
wire Q;
wire Q35;
wire Q36;
wire Q37;
wire Q38;
wire Q39;
wire Q40;

wire sampler;                             

// assign statements (if any)                          
Block1 i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.D(D),
	.D41(D41),
	.D42(D42),
	.D43(D43),
	.D44(D44),
	.D45(D45),
	.D46(D46),
	.D47(D47),
	.D48(D48),
	.Q(Q),
	.Q35(Q35),
	.Q36(Q36),
	.Q37(Q37),
	.Q38(Q38),
	.Q39(Q39),
	.Q40(Q40)
);

// clock
always
begin
	clock = 1'b0;
	clock = #500 1'b1;
	#500;
end 

// D
initial
begin
	D = 1'b0;
	D = #480000 1'b1;
	D = #480000 1'b0;
end 

// D41
initial
begin
	D41 = 1'b1;
end 

// D42
initial
begin
	D42 = 1'b1;
end 

// D43
initial
begin
	D43 = 1'b1;
end 

// D44
initial
begin
	D44 = 1'b0;
end 

// D45
initial
begin
	D45 = 1'b0;
end 

// D46
initial
begin
	D46 = 1'b0;
end 

// D47
initial
begin
	D47 = 1'b0;
end 

// D48
initial
begin
	D48 = 1'b1;
end 

Block1_vlg_sample_tst tb_sample (
	.clock(clock),
	.D(D),
	.D41(D41),
	.D42(D42),
	.D43(D43),
	.D44(D44),
	.D45(D45),
	.D46(D46),
	.D47(D47),
	.D48(D48),
	.sampler_tx(sampler)
);

Block1_vlg_check_tst tb_out(
	.Q(Q),
	.Q35(Q35),
	.Q36(Q36),
	.Q37(Q37),
	.Q38(Q38),
	.Q39(Q39),
	.Q40(Q40),
	.sampler_rx(sampler)
);
endmodule

